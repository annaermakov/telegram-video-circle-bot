import os
import asyncio
import logging
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import ffmpeg

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import (
    BOT_TOKEN, VIDEO_CIRCLE_SIZE, MAX_FILE_SIZE_MB, MAX_DURATION_SECONDS,
    VIDEO_CODEC, AUDIO_CODEC, CRF_VALUE, TEMP_DIR, CLEANUP_TEMP_FILES,
    LOG_LEVEL, LOG_FORMAT, MESSAGES, validate_config, setup_temp_directory
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=LOG_FORMAT,
    level=getattr(logging, LOG_LEVEL)
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
QUALITY_SETTINGS = {
    'low': {
        'size': 240,
        'crf': 23,
        'preset': 'fast',
        'name': '240p (–±—ã—Å—Ç—Ä–æ)',
        'bitrate': '500k'
    },
    'medium': {
        'size': 480,
        'crf': 20,
        'preset': 'medium', 
        'name': '480p (—Å—Ä–µ–¥–Ω–µ)',
        'bitrate': '1000k'
    },
    'high': {
        'size': 720,
        'crf': 18,
        'preset': 'slow',
        'name': '720p (–≤—ã—Å–æ–∫–æ–µ)',
        'bitrate': '2000k'
    },
    'ultra': {
        'size': 1080,
        'crf': 16,
        'preset': 'slow',
        'name': '1080p (–º–∞–∫—Å–∏–º—É–º)',
        'bitrate': '4000k'
    }
}

class VideoCircleBot:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        self.pending_videos = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤–∏–¥–µ–æ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_msg = """üé• –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞!

üìπ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ:
‚Ä¢ 240p - –±—ã—Å—Ç—Ä–æ, –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä
‚Ä¢ 480p - —Å—Ä–µ–¥–Ω–µ, –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞  
‚Ä¢ 720p - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ 1080p - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
        await update.message.reply_text(welcome_msg)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_msg = """üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫

üìä –ö–∞—á–µ—Å—Ç–≤–∞:
‚Ä¢ 240p - —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ 240√ó240, –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ 480p - —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ 480√ó480, —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ 720p - —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ 720√ó720, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ  
‚Ä¢ 1080p - —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ 1080√ó1080, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

‚ö†Ô∏è –ß–µ–º –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç–µ–º –¥–æ–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞!

‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV, WebM –∏ –¥—Ä—É–≥–∏–µ
üîä –ó–≤—É–∫ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"""
        await update.message.reply_text(help_msg)
    
    def process_video_to_circle_sync(self, input_path, output_path, quality='medium'):
        """–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
        try:
            settings = QUALITY_SETTINGS[quality]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            probe = ffmpeg.probe(input_path)
            video_info = next(s for s in probe['streams'] if s['codec_type'] == 'video')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ
            audio_streams = [s for s in probe['streams'] if s['codec_type'] == 'audio']
            has_audio = len(audio_streams) > 0
            
            width = int(video_info['width'])
            height = int(video_info['height'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
            size = min(width, height)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            x_offset = (width - size) // 2
            y_offset = (height - size) // 2
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            input_stream = ffmpeg.input(input_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            video_processed = (
                input_stream
                .video
                .filter('crop', size, size, x_offset, y_offset)
                .filter('scale', settings['size'], settings['size'])
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            output_args = {
                'vcodec': 'libx264',
                'preset': settings['preset'],
                'crf': settings['crf'],
                'pix_fmt': 'yuv420p',
                'movflags': 'faststart',
                'profile:v': 'high',
                'level': '4.0',
                'maxrate': settings['bitrate'],
                'bufsize': f"{int(settings['bitrate'][:-1]) * 2}k"  # –ë—É—Ñ–µ—Ä –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –±–∏—Ç—Ä–µ–π—Ç–∞
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if has_audio:
                audio_processed = input_stream.audio
                output_args.update({
                    'acodec': 'aac',
                    'audio_bitrate': '192k',  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞
                    'ar': 48000,              # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
                    'ac': 2                   # –°—Ç–µ—Ä–µ–æ
                })
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
                output = ffmpeg.output(
                    video_processed,
                    audio_processed,
                    output_path,
                    **output_args
                )
            else:
                # –¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
                output = ffmpeg.output(
                    video_processed,
                    output_path,
                    **output_args
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            ffmpeg.run(output, overwrite_output=True, quiet=True)
            
            return True
            
        except ffmpeg.Error as e:
            error_msg = e.stderr.decode() if e.stderr else str(e)
            logger.error(f"–û—à–∏–±–∫–∞ ffmpeg: {error_msg}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            return False
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            video = update.message.video or update.message.document
            
            if not video:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if video.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
                await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_MB}MB")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            user_id = update.effective_user.id
            self.pending_videos[user_id] = {
                'file_id': video.file_id,
                'file_size': video.file_size,
                'message_id': update.message.message_id
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
            keyboard = []
            for quality_key, settings in QUALITY_SETTINGS.items():
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìπ {settings['name']}", 
                        callback_data=f"quality_{quality_key}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
            await update.message.reply_text(
                "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:\n\n"
                "‚Ä¢ 240p - –±—ã—Å—Ç—Ä–æ (5-10 —Å–µ–∫)\n"
                "‚Ä¢ 480p - —Å—Ä–µ–¥–Ω–µ (10-20 —Å–µ–∫)\n" 
                "‚Ä¢ 720p - –≤—ã—Å–æ–∫–æ–µ (20-40 —Å–µ–∫)\n"
                "‚Ä¢ 1080p - –º–∞–∫—Å–∏–º—É–º (30-60 —Å–µ–∫)\n\n"
                "‚ö†Ô∏è –ß–µ–º –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞!",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    
    async def handle_quality_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            if user_id not in self.pending_videos:
                await query.edit_message_text("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            quality = query.data.replace('quality_', '')
            if quality not in QUALITY_SETTINGS:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            settings = QUALITY_SETTINGS[quality]
            video_info = self.pending_videos[user_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ {settings['name']}...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(video_info['file_id'])
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            input_file = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False)
            output_file = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False)
            
            input_path = input_file.name
            output_path = output_file.name
            
            input_file.close()
            output_file.close()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            await file.download_to_drive(input_path)
            
            await query.edit_message_text(f"üé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ {settings['name']}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–∞–π–º–∞—É—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
            timeouts = {
                'low': 60,     # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è 240p
                'medium': 90,  # 1.5 –º–∏–Ω—É—Ç—ã –¥–ª—è 480p
                'high': 180,   # 3 –º–∏–Ω—É—Ç—ã –¥–ª—è 720p
                'ultra': 300   # 5 –º–∏–Ω—É—Ç –¥–ª—è 1080p
            }
            timeout = timeouts.get(quality, 120)
            
            try:
                loop = asyncio.get_event_loop()
                success = await asyncio.wait_for(
                    loop.run_in_executor(None, self.process_video_to_circle_sync, input_path, output_path, quality),
                    timeout=timeout
                )
            except asyncio.TimeoutError:
                logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
                await query.edit_message_text("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –∫–∞—á–µ—Å—Ç–≤–æ.")
                return
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
                    await query.edit_message_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ {settings['name']}...")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫
                    with open(output_path, 'rb') as video_file:
                        await context.bot.send_video_note(
                            chat_id=update.effective_chat.id,
                            video_note=video_file,
                            duration=min(60, MAX_DURATION_SECONDS),
                            length=settings['size'],  # –†–∞–∑–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤—É
                            reply_to_message_id=video_info['message_id']
                        )
                    
                    await query.edit_message_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ {settings['name']} —Å–æ–∑–¥–∞–Ω!")
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
                
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del self.pending_videos[user_id]
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.unlink(input_path)
                if os.path.exists(output_path):
                    os.unlink(output_path)
            except:
                pass
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    
    async def handle_other_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not validate_config():
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    setup_temp_directory()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = VideoCircleBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    application.add_handler(CallbackQueryHandler(bot.handle_quality_choice, pattern=r'^quality_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
    application.add_handler(MessageHandler(
        filters.VIDEO | (filters.Document.VIDEO), 
        bot.handle_video
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        bot.handle_other_messages
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω!")
    print("üìπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞: 240p, 480p, 720p, 1080p")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
