import os
import asyncio
import logging
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import ffmpeg

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import (
    BOT_TOKEN, VIDEO_CIRCLE_SIZE, MAX_FILE_SIZE_MB, MAX_DURATION_SECONDS,
    VIDEO_CODEC, AUDIO_CODEC, CRF_VALUE, TEMP_DIR, CLEANUP_TEMP_FILES,
    LOG_LEVEL, LOG_FORMAT, MESSAGES, validate_config, setup_temp_directory
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=LOG_FORMAT,
    level=getattr(logging, LOG_LEVEL)
)
logger = logging.getLogger(__name__)

# –§–ò–ù–ê–õ–¨–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram
QUALITY_SETTINGS = {
    'fast': {
        'size': 240,
        'crf': 25,
        'preset': 'ultrafast',
        'name': '240p (–±—ã—Å—Ç—Ä–æ)',
        'bitrate': '300k',
        'desc': '~5 —Å–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    },
    'balanced': {
        'size': 320,
        'crf': 23,
        'preset': 'fast', 
        'name': '320p (–±–∞–ª–∞–Ω—Å)',
        'bitrate': '500k',
        'desc': '~10 —Å–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    },
    'quality': {
        'size': 480,
        'crf': 20,
        'preset': 'medium',
        'name': '480p (–∫–∞—á–µ—Å—Ç–≤–æ)',
        'bitrate': '800k',
        'desc': '~15 —Å–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    },
    'best': {
        'size': 512,
        'crf': 18,
        'preset': 'medium',
        'name': '512p (–≤—ã—Å–æ–∫–æ–µ)',
        'bitrate': '1000k',
        'desc': '~25 —Å–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    },
    'ultra': {
        'size': 640,
        'crf': 16,
        'preset': 'medium',
        'name': '640p (–ú–ê–ö–°–ò–ú–£–ú!)',
        'bitrate': '1500k',
        'desc': '~40 —Å–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    }
}

class VideoCircleBot:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        self.pending_videos = {}
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_msg = """üé• –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤!

üìπ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ –∏ –≤—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ:
‚Ä¢ 240p - –±—ã—Å—Ç—Ä–æ (~5 —Å–µ–∫)
‚Ä¢ 320p - –±–∞–ª–∞–Ω—Å (~10 —Å–µ–∫)  
‚Ä¢ 480p - –∫–∞—á–µ—Å—Ç–≤–æ (~15 —Å–µ–∫)
‚Ä¢ 512p - –≤—ã—Å–æ–∫–æ–µ (~25 —Å–µ–∫)
‚Ä¢ 640p - –ú–ê–ö–°–ò–ú–£–ú! (~40 —Å–µ–∫)

üîä –ó–≤—É–∫: 192kbps —Å—Ç–µ—Ä–µ–æ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞!
‚ú® –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ!

/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
        await update.message.reply_text(welcome_msg)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_msg = """üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
2. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫!

üìä –ö–∞—á–µ—Å—Ç–≤–∞ (–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏):
‚Ä¢ 240p - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (~5 —Å–µ–∫)
‚Ä¢ 320p - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (~10 —Å–µ–∫)
‚Ä¢ 480p - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (~15 —Å–µ–∫)  
‚Ä¢ 512p - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (~25 —Å–µ–∫)
‚Ä¢ 640p - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –∫–∞—á–µ—Å—Ç–≤–æ (~40 —Å–µ–∫)

‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV, WebM, FLV –∏ –¥—Ä—É–≥–∏–µ
üîä –ó–≤—É–∫: 192 –∫–±–∏—Ç/—Å —Å—Ç–µ—Ä–µ–æ, 48kHz –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –¥–æ 50MB —Ñ–∞–π–ª, –¥–æ 60 —Å–µ–∫ –≤–∏–¥–µ–æ

‚ö° –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ)
2. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
4. –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ 192kbps —Å—Ç–µ—Ä–µ–æ

üéØ 640p - —ç—Ç–æ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤ –≤ Telegram!"""
        await update.message.reply_text(help_msg)
    
    def process_video_to_circle_sync(self, input_path, output_path, quality='balanced'):
        """–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
        try:
            settings = QUALITY_SETTINGS[quality]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            probe = ffmpeg.probe(input_path)
            video_info = next(s for s in probe['streams'] if s['codec_type'] == 'video')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ
            audio_streams = [s for s in probe['streams'] if s['codec_type'] == 'audio']
            has_audio = len(audio_streams) > 0
            
            width = int(video_info['width'])
            height = int(video_info['height'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
            size = min(width, height)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            x_offset = (width - size) // 2
            y_offset = (height - size) // 2
            
            # –°–æ–∑–¥–∞–µ–º ffmpeg pipeline
            input_stream = ffmpeg.input(input_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            video_stream = (
                input_stream
                .video
                .filter('crop', size, size, x_offset, y_offset)
                .filter('scale', settings['size'], settings['size'])
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            video_args = {
                'vcodec': 'libx264',
                'preset': settings['preset'],
                'crf': settings['crf'],
                'pix_fmt': 'yuv420p',
                'movflags': 'faststart',
                'maxrate': settings['bitrate'],
                'bufsize': f"{int(settings['bitrate'][:-1]) * 2}k",  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
                'profile:v': 'high',  # –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                'level': '4.0',
                't': min(60, MAX_DURATION_SECONDS)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if has_audio:
                audio_stream = input_stream.audio
                audio_args = {
                    'acodec': 'aac',
                    'audio_bitrate': '192k',  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞
                    'ar': 48000,              # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
                    'ac': 2                   # –°—Ç–µ—Ä–µ–æ
                }
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                all_args = {**video_args, **audio_args}
                
                # –°–æ–∑–¥–∞–µ–º output —Å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
                output = ffmpeg.output(
                    video_stream,
                    audio_stream,
                    output_path,
                    **all_args
                )
            else:
                # –¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
                output = ffmpeg.output(
                    video_stream,
                    output_path,
                    **video_args
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            ffmpeg.run(output, overwrite_output=True, quiet=True, capture_stdout=True)
            
            return True
            
        except ffmpeg.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ ffmpeg: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            return False
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            video = update.message.video or update.message.document
            
            if not video:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if video.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
                await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE_MB}MB")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            user_id = update.effective_user.id
            self.pending_videos[user_id] = {
                'file_id': video.file_id,
                'file_size': video.file_size,
                'message_id': update.message.message_id
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—á–µ—Å—Ç–≤–∞–º–∏
            keyboard = []
            for quality_key, settings in QUALITY_SETTINGS.items():
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìπ {settings['name']} ({settings['desc']})", 
                        callback_data=f"q_{quality_key}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞:\n\n"
                "üìä –í—Ä–µ–º—è - –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ\n"
                "üîä –ó–≤—É–∫ - –≤—Å–µ–≥–¥–∞ 192kbps —Å—Ç–µ—Ä–µ–æ\n"
                "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Telegram\n"
                "üéØ 640p - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ!",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_quality_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = update.effective_user.id
            
            if user_id not in self.pending_videos:
                await query.edit_message_text("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality = query.data.replace('q_', '')
            if quality not in QUALITY_SETTINGS:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ.")
                return
            
            settings = QUALITY_SETTINGS[quality]
            video_info = self.pending_videos[user_id]
            
            # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await query.edit_message_text(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {settings['name']}...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(video_info['file_id'])
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            input_file = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False)
            output_file = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False)
            
            input_path = input_file.name
            output_path = output_file.name
            
            input_file.close()
            output_file.close()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º
            await file.download_to_drive(input_path)
            
            await query.edit_message_text(f"üé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ {settings['name']}...")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            timeout_map = {
                'fast': 30,
                'balanced': 40, 
                'quality': 50,
                'best': 60,
                'ultra': 90  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            }
            timeout = timeout_map.get(quality, 45)
            
            try:
                loop = asyncio.get_event_loop()
                success = await asyncio.wait_for(
                    loop.run_in_executor(None, self.process_video_to_circle_sync, input_path, output_path, quality),
                    timeout=timeout
                )
            except asyncio.TimeoutError:
                await query.edit_message_text(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {settings['name']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ.")
                return
            
            if success and os.path.exists(output_path) and os.path.getsize(output_path) > 0:
                await query.edit_message_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {settings['name']}...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                with open(output_path, 'rb') as video_file:
                    await context.bot.send_video_note(
                        chat_id=update.effective_chat.id,
                        video_note=video_file,
                        duration=min(60, MAX_DURATION_SECONDS),
                        length=settings['size'],
                        reply_to_message_id=video_info['message_id']
                    )
                
                await query.edit_message_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! {settings['name']} —Å–æ–∑–¥–∞–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ.")
            
            # –û—á–∏—Å—Ç–∫–∞
            del self.pending_videos[user_id]
            
            try:
                os.unlink(input_path)
                if os.path.exists(output_path):
                    os.unlink(output_path)
            except:
                pass
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_other_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞!\n\n"
            "üéØ –î–æ 640p —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è - –º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram!\n"
            "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not validate_config():
        return
    
    setup_temp_directory()
    
    bot = VideoCircleBot()
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CallbackQueryHandler(bot.handle_quality_choice, pattern=r'^q_'))
    application.add_handler(MessageHandler(filters.VIDEO | (filters.Document.VIDEO), bot.handle_video))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_other_messages))
    
    print("ü§ñ –§–ò–ù–ê–õ–¨–ù–´–ô –±–æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω!")
    print("üìπ –ö–∞—á–µ—Å—Ç–≤–∞: 240p ‚Üí 320p ‚Üí 480p ‚Üí 512p ‚Üí 640p –ú–ê–ö–°–ò–ú–£–ú!")
    print("üîä –ó–≤—É–∫: 192kbps —Å—Ç–µ—Ä–µ–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
    print("üéØ 640p - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤ Telegram!")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
